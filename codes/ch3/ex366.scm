;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(define (pairs s t)
  (cons-stream
   (list (stream-car s) (stream-car t))
   (interleave
    (stream-map (lambda (x) (list (stream-car s) x))
                (stream-cdr t))
    (pairs (stream-cdr s) (stream-cdr t)))))

(define (interleave s1 s2)
  (if (stream-null? s1)
      s2
      (cons-stream (stream-car s1)
                   (interleave s2 (stream-cdr s1)))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;; pairs 第一个值是 (1,1) 不会错。
;; interleave 的两个参数分别是 ((1 2) (1 3) (1 4) ... (1 N) ... )
;; 和 (pairs (2 3 ... N ...) (2 3 ... N ... ))
;; 由于是交替出现，因此，前面几个元素为 (1 1) (1 2) (2 2) (1 3) (2 3) (1 4) (3 3)
;; 这样，到 (1 100) 比较好算，因为第一个数组和的二个交替出现，所以是 (1 N) 出现时，
;; 索引为 (N-1) * 2 ,(N>1), 例如 (1 3), N=3, 是数列中第4个出现。
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; 下面来考虑 (N N)， 如下过程中，假定 from-N 是从 N 开始的整数流。

;; 假定 (pairs from-N+1 from-N+1) 中 (100, 100) 是第 m 个出现，由于
;; interleave 是交错并且首先摘取 s1 中元素，那那么在 (pairs from-N from-N)
;; 中，(100, 100) 是第 2 * m + 1 个出现。(N < 100). 在
;; (pairs from-N-1 from-N-1) 中， (100, 100)是第 2 * (2 * m + 1) + 1 个出现。
;; 这样, 假定在 (pairs from-n from-n) 中，(100, 100) 出现的序号是 f(n) 那么有
;; f(n) = 2 * f(n+1) +1 (n <100)
;; 并且 f(100) = 1

;; 上面的方程解出来 f(n) = 2^(101-n) - 1,  1 <= n <= 100.
;; 所以 f(1) = 2^100 - 1, 在 (100, 100) 之前应该有 2^100 - 2 个序列。
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
