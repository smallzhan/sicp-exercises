;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(define x 10)

(define s (make-serializer))

(parallel-execute (lambda () (set! x ((s (lambda () (* x x))))))
                  (s (lambda () (set! x (+ x 1)))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;
;; 按照分析，在 第一个lambda 里面 x 值写回之前可能会执行第二个 lambda，因此会
;; 多出来 100
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; 不知道怎么用 parallel-execute 来测试。。。
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; 下面的程序得不到想要的结果, 貌似 parallel 放到函数里面就不干活了。。。

;; (define (test n)
;;   (define x 10)
;;   (parallel-execute (lambda () (set! x ((s (lambda () (* x x))))))
;;                     (s (lambda () (set! x (+ x 1)))))
;;   (display x)
;;   (newline)
;;   (if (= n 0)
;;       'done
;;       (test (- n 1))))
